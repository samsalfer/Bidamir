package services;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import javax.sql.rowset.serial.SerialException;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import org.apache.commons.io.IOUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.HttpSolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

import repositories.ResultadoRepository;
import repositories.ResumenRepository;
import domain.Contest;
import domain.Estudio;
import domain.Resumen;
import domain.ResumenXML;
import domain.SentenciaXML;
import domain.User;
import domain.BusquedaXML;
import forms.BusquedaForm;
import forms.ResultadoForm;
import forms.ResumenForm;


@Service
@Transactional
public class BusquedaService {

	// Managed repository
	// -----------------------------------------------------------------------

	@Autowired
	private ResumenRepository resumenRepository;

	// Supporting services
	// -----------------------------------------------------------------------
	
	@Autowired
	private EstudioService estudioService;
	
	@Autowired
	private UserService userService;
	
	
	

	// Constructors
	// --------------------------------------------------------------------------------

	// Simple CRUD methods
	// ------------------------------------------------------------------


	
	public List<BusquedaXML> buscar(BusquedaForm busquedaForm) throws SolrServerException, IOException{

		  HttpSolrServer server = new HttpSolrServer("http://10.232.31.70:8081/solr/example");
		  SolrQuery query = new SolrQuery();
		  String condiciones="";
		  List<String> lista;	
		  List<String> condicionesString = new ArrayList<String>();
		  //Obtengo query
		  if(busquedaForm.getAfirmacion().equals("")){
			  
			  condiciones="cat:*";
		  }
		  else{
			  lista = new ArrayList<String>(Arrays.asList(busquedaForm.getAfirmacion().split(",")));
			  condicionesString.addAll(lista);
			 // lista = new ArrayList<String>(Arrays.asList(busquedaForm.getAfirmacion().replaceAll(" ", "*").split(",")));
			  condiciones+="cat:*"+lista.get(0)+"* ";
			  lista.remove(0);
			  
			  for(String i:lista){
				  condiciones+="&& cat:*"+i+"*";
			  }
		  }
		  
		  if(busquedaForm.getNegacion().equals("")){
			  
			  condiciones+=" && content_type:*";
		  }
		  else{
			  lista = new ArrayList<String>(Arrays.asList(busquedaForm.getNegacion().split(",")));
			  condicionesString.addAll(lista);
			 // lista = new ArrayList<String>(Arrays.asList(busquedaForm.getNegacion().replaceAll(" ", "*").split(",")));
			  condiciones+=" && content_type:*"+lista.get(0)+"* ";
			  lista.remove(0);
			  
			  for(String i:lista){
				  condiciones+=" && content_type:*"+i+"*";
			  }
		  }
		  
		  if(busquedaForm.getEspeculacion().equals("")){
			  
			  condiciones+=" && links:*";
		  }
		  else{
			  lista = new ArrayList<String>(Arrays.asList(busquedaForm.getEspeculacion().split(",")));
			  condicionesString.addAll(lista);
			 // lista = new ArrayList<String>(Arrays.asList(busquedaForm.getEspeculacion().replaceAll(" ", "*").split(",")));
			  condiciones+=" && links:*"+lista.get(0)+"* ";
			  lista.remove(0);
			  
			  for(String i:lista){
				  condiciones+=" && links:*"+i+"*";
			  }
		  }
		  ///
		  ///Realizo query
		  query.setQuery( condiciones);
		  QueryResponse rsp = server.query( query );
		  List<BusquedaXML> result= rsp.getBeans(BusquedaXML.class);
		  
		  for (BusquedaXML aux:result){
			  for (String condicion:condicionesString){

				 Integer indice = aux.getTexto().toLowerCase().indexOf(condicion.toLowerCase());
				 while (indice >=0){				
					 String textoAux = aux.getTexto().substring(0, indice)+"<b>"+aux.getTexto().substring(indice, indice+condicion.length())+"</b>"+aux.getTexto().substring(indice+condicion.length());
				 
					 aux.setTexto(textoAux);
					 indice = aux.getTexto().toLowerCase().indexOf(condicion.toLowerCase(), indice+condicion.length()+6);
				 }
			  }
		  }
		  
		return result;
	}
	
	

}
