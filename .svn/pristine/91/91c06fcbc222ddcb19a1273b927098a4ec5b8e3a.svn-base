/* CustomerController.java
 *
 * Copyright (C) 2013 Universidad de Sevilla
 * 
 * The use of this project is hereby constrained to the conditions of the 
 * TDG Licence, a copy of which you may download from 
 * http://www.tdg-seville.info/License.html
 * 
 */

package controllers.user;


import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import security.LoginService;
import services.EstudioService;
import services.ResultadoService;
import services.ResumenService;
import services.SentenciaService;
import controllers.AbstractController;
import domain.Essay;
import domain.Estudio;
import domain.Resultado;
import domain.Resumen;
import domain.ResumenXML;
import domain.Sentencia;
import domain.SentenciaXML;
import domain.User;
import forms.EstudioForm;
import forms.ResultadoForm;
import forms.ResumenForm;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

@Controller
@RequestMapping("/user/resumen")
public class UserResumenController extends AbstractController {
	// Services ---------------------------------------------------------------

	@Autowired
	private EstudioService estudioService;
	
	@Autowired
	private ResumenService resumenService;
	
	@Autowired
	private SentenciaService sentenciaService;


	// Constructors -----------------------------------------------------------

	public UserResumenController() {
		super();
	}




	@RequestMapping(value="/list")
	public ModelAndView list(){
		ModelAndView result;
		Collection<Resumen> resumenes;
		int userAccountId;
		
		userAccountId=LoginService.getPrincipal().getId();
		
		resumenes = resumenService.findResumenByUser(userAccountId);
		
		
		result = new ModelAndView("resumen/list");
		result.addObject("resumenes", resumenes);
		result.addObject("requestURI", "user/resumen/list.do");
		
		return result;
	}
	
	@RequestMapping(value = "/delete", method = RequestMethod.GET)
	public ModelAndView delete(@RequestParam int resumenId) {
		ModelAndView result;

		resumenService.delete(resumenId);
		result = new ModelAndView("redirect:list.do");
		
		return result;
	}

	
	////Display///////////////////////
	@RequestMapping(value = "/display", method = RequestMethod.GET)
	public ModelAndView display() {
		ModelAndView result;
		ResumenForm resumenForm = new ResumenForm();

		
		result = new ModelAndView("resumen/display");
		result.addObject("resumenForm", resumenForm);
		return result;
	}
	
	
	@RequestMapping(value = "/display2", method = RequestMethod.GET)
	public ModelAndView display2(@RequestParam int resumenId) {
		ModelAndView result;
		Resumen resumen;
		resumen = resumenService.findOne(resumenId);
		
		result = new ModelAndView("resumen/display2");
		result.addObject("resumen", resumen);
		return result;
	}
	////////////////////////////////////////
		
	@RequestMapping(value = "/display", method = RequestMethod.POST, params = "subir")
	public ModelAndView sbuir(
			@Valid ResumenForm resumenForm,
			BindingResult bindingResult) {
		ModelAndView result;
		
		

		if (bindingResult.hasErrors()) {
			result = new ModelAndView("resumen/display");
			result.addObject("resumenForm", resumenForm);
						
		} else {
			try {
				
				String aux;
				aux= resumenService.leerTXT(resumenForm);
				resumenForm.getTexto().add(aux);
				
				result = new ModelAndView("resumen/display");
				result.addObject("resumenForm", resumenForm);
				
			} catch (Throwable oops) {
				result = new ModelAndView("resumen/display");
				result.addObject("resumenForm", resumenForm);

			
				result.addObject("message", "register.commit.error");
		
			}
		}
		return result;

	}
	
	////////////////////////////////////////
	
	@RequestMapping(value = "/display", method = RequestMethod.POST, params = "resumir")
	public ModelAndView resumir(
			@Valid ResumenForm resumenForm,
			BindingResult bindingResult) {
		ModelAndView result;


		if (bindingResult.hasErrors()) {
			result = new ModelAndView("resumen/display");
			result.addObject("resumenForm", resumenForm);
						
		} else {
			try {
				
				ResumenXML resumenXML;
				Resumen resumen;
				int idResumen;
				resumenXML= resumenService.lecturaXML();
				resumen = resumenService.create(resumenXML);
				
				idResumen = resumenService.save(resumen);
				
				resumen = resumenService.findOne(idResumen);
				
				for(SentenciaXML sentenciaAux:resumenXML.getSentencias()){
					Sentencia sentencia;
					sentencia = sentenciaService.create(sentenciaAux, resumen);
					
					sentenciaService.save(sentencia);
					
				}
				
				result = new ModelAndView("resumen/display");
				result.addObject("resumenForm", resumenForm);
				result.addObject("resumen", resumenXML);
				
			} catch (Throwable oops) {
				result = new ModelAndView("resumen/display");
				result.addObject("resumenForm", resumenForm);

			
				result.addObject("message", "register.commit.error");
		
			}
		}
		return result;

	}	
	
	@RequestMapping(value = "/display", method = RequestMethod.POST, params = "add")
	public ModelAndView nuevo(
			@Valid ResumenForm resumenForm,
			BindingResult bindingResult) {
		ModelAndView result;
		
		

		if (bindingResult.hasErrors()) {
			result = new ModelAndView("resumen/display");
			result.addObject("resumenForm", resumenForm);
						
		} else {
			try {
				
				String aux;
				aux= "";
				resumenForm.getTexto().add(aux);
				
				result = new ModelAndView("resumen/display");
				result.addObject("resumenForm", resumenForm);
				
			} catch (Throwable oops) {
				result = new ModelAndView("resumen/display");
				result.addObject("resumenForm", resumenForm);

			
				result.addObject("message", "register.commit.error");
		
			}
		}
		return result;

	}
}