/* CustomerController.java
 *
 * Copyright (C) 2013 Universidad de Sevilla
 * 
 * The use of this project is hereby constrained to the conditions of the 
 * TDG Licence, a copy of which you may download from 
 * http://www.tdg-seville.info/License.html
 * 
 */

package controllers.user;


import java.util.ArrayList;
import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import security.LoginService;
import services.EstudioService;
import services.ResultadoService;
import controllers.AbstractController;
import domain.Essay;
import domain.Estudio;
import domain.Resultado;
import domain.User;
import forms.EstudioForm;
import forms.ResultadoForm;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

@Controller
@RequestMapping("/user/resultado")
public class UserResultadoController extends AbstractController {
	// Services ---------------------------------------------------------------

	@Autowired
	private EstudioService estudioService;
	
	@Autowired
	private ResultadoService resultadoService;


	// Constructors -----------------------------------------------------------

	public UserResultadoController() {
		super();
	}


	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create(@RequestParam int estudioId) {
		ModelAndView result;
		Estudio estudio;

		estudio= estudioService.findOne(estudioId);

		ResultadoForm resultadoForm = new ResultadoForm();
		resultadoForm.setEstudioId(estudioId);
		
		resultadoForm.setDatosAPredecir(new String[estudio.getAtributosSeleccionados().size()-1]);

		ArrayList<String> listaAtributosSinObjetivo;
		
		estudio= estudioService.findOne(estudioId);
		
		listaAtributosSinObjetivo = estudio.getAtributosSeleccionados();
		listaAtributosSinObjetivo.remove(estudio.getLabel());
		

		result = new ModelAndView("resultado/create");
		
		result.addObject("resultadoForm", resultadoForm);
		result.addObject("listaAtributosSinObjetivo", listaAtributosSinObjetivo);
	

		return result;
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST, params = "save")
	public ModelAndView save(
			@Valid ResultadoForm resultadoForm,
			BindingResult bindingResult) {
		ModelAndView result;
		String atributos;
		Estudio estudio;

		if (bindingResult.hasErrors()) {
			result = new ModelAndView("resutado/create");
			result.addObject("resultadoForm", resultadoForm);
						
		} else {
			try {
				
				Resultado resultado= resultadoService.reconstruc(resultadoForm);
				resultadoService.save(resultado);
				resultado = resultadoService.findByPath(resultado.getPath());
				//Utilizo para llamar a la vista display
				estudio = estudioService.findOne(resultadoForm.getEstudioId());
				
				atributos = estudioService.atributosAString(estudio);
				
				result = new ModelAndView("resultado/display");
				result.addObject("resultado", resultado);
				result.addObject("atributos", atributos);
			} catch (Throwable oops) {
				result = new ModelAndView("resultado/create");
				result.addObject("resultadoForm", resultadoForm);

			
				result.addObject("message", "register.commit.error");
		
			}
		}
		return result;

	}

	@RequestMapping(value="/list")
	public ModelAndView list(){
		ModelAndView result;
		Collection<Estudio> estudios;
		int userAccountId;
		
		userAccountId=LoginService.getPrincipal().getId();
		
		estudios = estudioService.findEstudiosByUser(userAccountId);
		
		
		result = new ModelAndView("estudio/list");
		result.addObject("estudios", estudios);
		result.addObject("requestURI", "user/estudio/list.do");
		
		return result;
	}
	
	@RequestMapping(value = "/delete", method = RequestMethod.GET)
	public ModelAndView delete(@RequestParam int estudioId) {
		ModelAndView result;

		estudioService.delete(estudioId);
		result = new ModelAndView("redirect:list.do");
		
		return result;
	}

	
	////No Usado///////////////////////
	@RequestMapping(value = "/display", method = RequestMethod.GET)
	public ModelAndView display(@RequestParam int estudioId) {
		ModelAndView result;
		
		Estudio estudio;
		String atributos;
		
		estudio =  estudioService.findOne(estudioId);
		atributos = estudioService.atributosAString(estudio);
		
		result = new ModelAndView("resultado/display");
		result.addObject("estudio", estudio);
		result.addObject("atributos", atributos);
		
		return result;
	}
	////////////////////////////////////////
	
	
	@RequestMapping(value = "/select", method = RequestMethod.GET)
	public ModelAndView select() {
		ModelAndView result;
			
		result = new ModelAndView("estudio/select");
		
		
		return result;
	}
	
	@RequestMapping(value = "/finalizarG", method = RequestMethod.GET)
	public ModelAndView finalizar(@RequestParam int estudioId) {
		ModelAndView result;
			
		result = new ModelAndView("redirect:list.do");
		
		estudioService.finalizar(estudioId);
		
		
		return result;
	}
	

}