package services;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import javax.sql.rowset.serial.SerialException;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import org.apache.commons.io.IOUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

import repositories.ResultadoRepository;
import repositories.ResumenRepository;
import domain.Contest;
import domain.Estudio;
import domain.Resumen;
import domain.ResumenXML;
import domain.SentenciaXML;
import domain.User;
import forms.ResultadoForm;
import forms.ResumenForm;


@Service
@Transactional
public class ResumenService {

	// Managed repository
	// -----------------------------------------------------------------------

	@Autowired
	private ResumenRepository resumenRepository;

	// Supporting services
	// -----------------------------------------------------------------------
	
	@Autowired
	private EstudioService estudioService;
	
	@Autowired
	private UserService userService;
	
	
	

	// Constructors
	// --------------------------------------------------------------------------------

	// Simple CRUD methods
	// ------------------------------------------------------------------

	public Resumen create(ResumenXML resumenXML) throws ParseException{
		Resumen result;
		User user;
		
		DateFormat format = new SimpleDateFormat("yyyyMMddhhmm");
		
		result = new Resumen();
		result.setIdDocumento(resumenXML.getIdDocumento());
		result.setPaciente(resumenXML.getPaciente());
		result.setTipoResumen(resumenXML.getTipoResumen());
		result.setnPalabras(resumenXML.getnPalabras());
		result.setnSentencias(resumenXML.getnSentencias());
		
		result.setFechaFinal(format.parse(resumenXML.getFechaFinal()));
		result.setFechaIngreso(format.parse(resumenXML.getFechaIngreso()));
		
		user = userService.findByPrincipal();
		result.setUser(user);
		
		return result;
	}
	
	public Resumen findOne(int resumenId){
		Resumen result;
		User user;
		
		user = userService.findByPrincipal();
		Assert.notNull(resumenId);
				
		result = resumenRepository.findOne(resumenId);
		
		Assert.isTrue(user.equals(result.getUser()));
		
		Assert.notNull(result);
		
		return result;
	}
	
	public Collection<Resumen> findResumenByUser(int userAccountId){
		Collection<Resumen> result;
		result = resumenRepository.findResumenByUser(userAccountId);
		
		return result;
	}
	
	public int save(Resumen resumen){
		Assert.notNull(resumen);
		
		return resumenRepository.save(resumen).getId();
		
		
		
	}
	
	//Others methods
	
	public void delete(int resumenId) {
		Resumen resumen;
		User user;
		
		user = userService.findByPrincipal();
		Assert.notNull(resumenId);
				
		resumen = findOne(resumenId);
		
		Assert.isTrue(user.equals(resumen.getUser()));
		
		Assert.notNull(resumen);
		
		resumenRepository.delete(resumen);
	
		
	}
	

	
	
	//Escritura de una clase XML desde objeto
	public void probando() {

		  ResumenXML resumenXML = new ResumenXML();
		  resumenXML.setFechaFinal("201504041355");
		  resumenXML.setFechaIngreso("201504041356");
		  resumenXML.setIdDocumento(1);
		  resumenXML.setnPalabras(5);
		  resumenXML.setnSentencias(6);
		  resumenXML.setPaciente("Paciente");
		  resumenXML.setTipoResumen("TipoLargo");
		  
		  Collection<SentenciaXML> sentencias;
		  sentencias = new ArrayList<SentenciaXML>();
		  
		  SentenciaXML sentencia1 = new SentenciaXML();
		  sentencia1.setHojaEvolucion("Hoja1");
		  sentencia1.setIdSentencia(6);
		  sentencia1.setTexto("Este es el resumen");
		  
		  SentenciaXML sentencia2 = new SentenciaXML();
		  sentencia2.setHojaEvolucion("Hoja2");
		  sentencia2.setIdSentencia(5);
		  sentencia2.setTexto("Este es el resumen 2");
		  
		  sentencias.add(sentencia1);
		  sentencias.add(sentencia2);
		  
		  resumenXML.setSentencias(sentencias);
		  
		  
		  
		  try {

			File file = new File("C:\\Users\\salasamuel46k\\Desktop\\file.xml");
			JAXBContext jaxbContext = JAXBContext.newInstance(ResumenXML.class);
			Marshaller jaxbMarshaller = jaxbContext.createMarshaller();

			// output pretty printed
			jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

			jaxbMarshaller.marshal(resumenXML, file);
			jaxbMarshaller.marshal(resumenXML, System.out);

		      } catch (JAXBException e) {
			e.printStackTrace();
		      }

		}
	
	public ResumenXML lecturaXML(){
		
		ResumenXML result=null;
		
		try {
			ClassLoader classLoader = getClass().getClassLoader();
			File file = new File(classLoader.getResource("/file.xml").getFile());
				JAXBContext jaxbContext = JAXBContext.newInstance(ResumenXML.class);

				Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
				
				
				result = (ResumenXML) jaxbUnmarshaller.unmarshal(file);
				
			  } catch (JAXBException e) {
				e.printStackTrace();
			  }
		
		return result;
		
	}
	
	public String leerTXT(ResumenForm resumenForm) throws IOException{
		Assert.notNull(resumenForm);
		
		String result;
		
		StringWriter writer = new StringWriter();
		IOUtils.copy(resumenForm.getFile().getInputStream(), writer);
		result = writer.toString();
		
		
		return result;
		
		
		
	}


}
